### ir-send-pcs2 v1.0
### Circuit Playground Express (CPX) simple IR transmitter example (PCS II)
### Very simple code sender to test codes generated by ir-decode-to-python
### from an RGBW lightbulb with by a "Practical Colorful Series II" remote

### copy this file to CPX as main.py

### Copyright (c) 2018 Kevin J. Walters

### Permission is hereby granted, free of charge, to any person obtaining a copy
### of this software and associated documentation files (the "Software"), to deal
### in the Software without restriction, including without limitation the rights
### to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
### copies of the Software, and to permit persons to whom the Software is
### furnished to do so, subject to the following conditions:

### The above copyright notice and this permission notice shall be included in all
### copies or substantial portions of the Software.

### THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
### IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
### FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
### AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
### LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
### OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
### SOFTWARE.

import time

import pulseio
import board
import adafruit_irremote
from adafruit_circuitplayground.express import cpx

### 38kHz modulation with 50% duty cycle (represented by 2**15==32768)
pwm = pulseio.PWMOut(board.IR_TX,
                    frequency=38000,
                    duty_cycle=2**15)
pulseout = pulseio.PulseOut(pwm)

### Create an encoder for NEC IR timed pulses (in microseconds)
### NEC values from Adafruit example - these do work for PCS II
##encoder = adafruit_irremote.GenericTransmit(header=[9500, 4500],
##                                            one=   [550,   550],
##                                            zero=  [550,  1700],
##                                            trail=0)
### Observed values
encoder = adafruit_irremote.GenericTransmit(header=[9000, 4500],
                                            one=   [575,   550],
                                            zero=  [600,  1650],
                                            trail=0)
                                            
                                            
### Practical Colorful Series II remote for RGBW lightbulbs
### There's clear potential here to store these more neatly
### in a separate per remote control file/database
### generated by ir-decode-to-python.py
ircodes = [
           [255, 0, 93, 162],
           [255, 0, 157, 98],
           [255, 0, 29, 226],
           [255, 0, 221, 34],
           [255, 0, 253, 2],
           [255, 0, 61, 194],
           [255, 0, 31, 224],
           [255, 0, 87, 168],
           [255, 0, 111, 144],
           [255, 0, 151, 104],
           [255, 0, 103, 152],
           [255, 0, 79, 176],
           [255, 0, 207, 48],
           [255, 0, 231, 24],
           [255, 0, 133, 122],
           [255, 0, 189, 66],
           [255, 0, 181, 74],
           [255, 0, 173, 82],
          ]
irnames = {
           "on": 0,
           "brightwhite": 1,
           "off": 2,
           "diyflash": 3,
           "dimwhite": 4,
           "hourtimer": 5,
           "smooth": 6,
           "higher": 7,
           "lower": 8,
           "preset1": 9,
           "preset2": 10,
           "preset3": 11,
           "red1": 12,
           "green2": 13,
           "blue3": 14,
           "green1": 15,
           "blue2": 16,
           "red3": 17,
          }
                 
### loop asking the user to type name of button they wish to send
### pre-empty any ValueError exceptions with in test                 
while True:
    name = input("Enter name of IR remote's button: ")
    
    ### TODO - would be useful to be able to send the NEC repeat code
    if name in irnames:    
        cpx.red_led = True
        ### 3.0.0 libs unintentionally spit debug output, fixed by
        ### https://github.com/adafruit/Adafruit_CircuitPython_IRRemote/commit/e209d5620aceb08751f07e40b3e6690ff8ae5747#diff-0fe75fc9012f8da2c58900053dfb98cb
        encoder.transmit(pulseout, ircodes[irnames[name]])
        cpx.red_led = False
    else:
        print(name, "is not a known button")
        print("names are:", " ".join((sorted(list(irnames.keys())))))
