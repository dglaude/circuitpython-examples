### cpx-basic-synth v0.9
### CircuitPython (on CPX) synth module using internal speaker
### Velocity sensitive monophonic synth
### with crude amplitude modulation (cc1) and choppy pitch bend

### Tested with CPX and CircuitPython and 4.0.0-beta.5

### Needs recent adafruit_midi module

### copy this file to CPX as code.py

### MIT License

### Copyright (c) 2019 Kevin J. Walters

### Permission is hereby granted, free of charge, to any person obtaining a copy
### of this software and associated documentation files (the "Software"), to deal
### in the Software without restriction, including without limitation the rights
### to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
### copies of the Software, and to permit persons to whom the Software is
### furnished to do so, subject to the following conditions:

### The above copyright notice and this permission notice shall be included in all
### copies or substantial portions of the Software.

### THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
### IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
### FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
### AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
### LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
### OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
### SOFTWARE.


import array
import time
import math
import random

import digitalio
import audioio
import busio
import board

import neopixel
import usb_midi
import adafruit_midi

from adafruit_midi.midi_message     import note_parser

from adafruit_midi.note_on          import NoteOn
from adafruit_midi.note_off         import NoteOff
from adafruit_midi.control_change   import ControlChange
from adafruit_midi.pitch_bend       import PitchBend

### TODO - playback 350000 max
### TODO - what am i going to do with modulation?
###        LFO depth on AM?
###        Dynamic waveform messing around?

# Turn the speaker on
speaker_enable = digitalio.DigitalInOut(board.SPEAKER_ENABLE)
speaker_enable.direction = digitalio.Direction.OUTPUT
speaker_on = True
speaker_enable.value = speaker_on

dac = audioio.AudioOut(board.SPEAKER)

# 440Hz is the standard frequency for A4
A4refhz = const(440)
midinoteC4 = note_parser("C4")
midinoteA4 = note_parser("A4")

sample_len = 96
base_sample_rate = A4refhz * sample_len
max_sample_rate = 350000  # a CPX / M0 DAC limitation

def waveform_square(length, waves, volumes):
    for vol in volumes:
        waveraw = array.array("h", [-vol] * (length // 2 - 1)
                                   + [0]
                                   +  [vol] * (length - length // 2 - 1)
                                   + [0])
        waves.append((audioio.RawSample(waveraw), waveraw))

# Make some square waves of different volumes
# volumes generated by this with
# [round(math.sqrt(x)/(10-1)*32767*(10-1)/math.sqrt(10-1)) for x in range(1, 10)]
waveform_by_vol = []
waveform_square(sample_len,
                waveform_by_vol,
                [10922, 15447, 18918, 21845, 24423, 26754, 28898, 30893, 32767])

### brightness 1.0 saves memory by removing need for a second buffer
### 10 is number of NeoPixels on
numpixels = const(10)
### brightness of 1.0 prevents an extra array from being created
pixels = neopixel.NeoPixel(board.NEOPIXEL, numpixels, brightness=1.0)

### Turn NeoPixel on to represent a note using RGB x 10
### to represent 30 notes
### Doesn't do anything with pitch bend
def noteLED(pixels, note, velocity):
    note30 = ( note - midinoteC4 ) % (3 * numpixels)
    pos = note30 % numpixels
    r, g, b = pixels[pos]
    if velocity == 0:
        brightness = 0
    else:
        ### max brightness will be 32
        brightness = round(velocity / 127 * 30 + 2)
    ### Pick R/G/B based on range within the 30 notes
    if note30 < 10:
        r = brightness
    elif note30 < 20:
        g = brightness
    else: 
        b = brightness
    pixels[pos] = (r, g, b)

midi_channel = 1
midi = adafruit_midi.MIDI(midi_in=usb_midi.ports[0],
                          in_channel=midi_channel-1)

# pitchbendrange in semitones - often 2 or 12
pitch_bend_multiplier = 2 / 8192
pitch_bend_value = 8192  # mid point - no bend

wave = None
last_note = None

# Amplitude modulation frequency
am_freq = 16
mod_wheel = 0

while True:
    msg = midi.receive()
    if isinstance(msg, NoteOn) and msg.velocity != 0:
        last_note = msg.note
        pitch_bend = (pitch_bend_value - 8192) * pitch_bend_multiplier
        note_freq = round(A4refhz * math.pow(2, (last_note - midinoteA4 + pitch_bend) / 12.0))

        note_sample_rate = base_sample_rate * note_freq / A4refhz 

        # Select the sine wave with volume for the note velocity
        # Value slightly above 127 together with int() maps the velocities
        # to equal intervals and avoids going out of bounds
        wave_vol = int(msg.velocity / 127.01 * len(waveform_by_vol))
        wave = waveform_by_vol[wave_vol]

        if note_sample_rate > max_sample_rate:
            note_sample_rate = max_sample_rate
        wave[0].sample_rate = round(note_sample_rate)  # integer only
        dac.play(wave[0], loop=True)

        noteLED(pixels, msg.note, msg.velocity)

    elif (isinstance(msg, NoteOff) or 
          isinstance(msg, NoteOn) and msg.velocity == 0):
        # Our monophonic "synth module" needs to ignore keys that lifted on
        # overlapping presses
        if msg.note == last_note:
            dac.stop()
                
        noteLED(pixels, msg.note, 0)  # turn off NeoPixel

    elif isinstance(msg, PitchBend):
        pitch_bend_value = msg.pitch_bend  ### 0 to 16383
        ### TODO - undo cut and paste here
        if last_note is not None:
            pitch_bend = (pitch_bend_value - 8192) * pitch_bend_multiplier
            note_freq = round(A4refhz * math.pow(2, (last_note - midinoteA4 + pitch_bend) / 12.0))
        ### TODO - sounds bad, need to limit rate of change, e.g. only every 100ms
        ### TODO - BUG - this must only play if already playing   
            note_sample_rate = base_sample_rate * note_freq / A4refhz 
        ### TODO - review whether there's an advantage to not assigning here
        ### if value would be the same as previously set value
            if note_sample_rate > max_sample_rate:
                note_sample_rate = max_sample_rate
            wave[0].sample_rate = round(note_sample_rate)  ### integer only
            dac.play(wave[0], loop=True)   ### TODO TODO - check I need to call play()

    elif isinstance(msg, ControlChange):
        if msg.control == 1:  # modulation wheel - TODO MOVE THIS TO adafruit_midi
            ### msg.value is 0 (none) to 127 (max)
            mod_wheel = msg.value

    if mod_wheel > 0:
        t1 = time.monotonic() * am_freq
        # Calculate a form of duty_cycle for enabling speaker for crude
        # amplitude modulation. Empirically the divisor needs to greater
        # than 127 as can't hear much when speaker is off more than half
        new_speaker_on = ( t1 - int(t1) ) > (mod_wheel / 220)
    else:
        new_speaker_on = True
    
    if speaker_on != new_speaker_on:
        speaker_enable.value = new_speaker_on
        speaker_on = new_speaker_on
